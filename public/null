Question::count()
Question::count()
Question::with('answers')->get()
Answer::get()
Answer::get()
Answer::get()
Question::count()
Question::get()
Answer::factory(4)->make();
Answer::factory(4)->trueFalse()->make();
Answer::get()
Role::get()
User::role('teacher')->get()
User::role('teacher')->get()->random()->id,
User::role('teacher')->get()->random()->id
User::role('teacher')->get()->random()->id
User::role('teacher')->get()->random()->id
User::role('teacher')->get()->random()->id
User::role('teacher')->get()->random()->id
User::role('teacher')->get()->random()->id
Question::factory(20)->create()->each(function ($question) {
            switch ($question->question_type) {
                case 'multiple choice':
                    Answer::factory(4)->multipleChoice()->create([
                        'question_id' => $question->id
                    ]);
                    break;

                case 'true false':
                    Answer::factory(2)->trueFalse()->create([
                        'question_id' => $question->id
                    ]);
                    break;

                case 'matching':
                    Answer::factory(5)->matching()->create([
                        'question_id' => $question->id
                    ]);
                    break;

                case 'short answer':
                    break;

                case 'essay':
                    break;
                    
                case 'calculate':
                    Answer::factory(1)->create([
                        'question_id' => $question->id,
                        'answer_text' => fake()->sentence(),
                    ]);
                    break;

                case 'ordering':
                    Answer::factory(4)->ordering()->create([
                        'question_id' => $question->id
                    ]);
                    break;

                default:
                    break;
            }
        });
Question::get()
Question::with('answers')->get()
